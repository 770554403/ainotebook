With all the discussion centered around the java web-application frameworks including Struts, SpringMVC and WebWork, 
how does one interface these with Jython and why would you want to do so. Normally, you will do this the same 
way that you would in a typical standalone console application. You must find a way to invoke the Jython interpreter 
and then execute your Jython code. The same is done in a Servlet environment. This example demonstrates how to put 
together a web-application that uses the Struts MVC (model, view, controller) framework and also uses Hibernate for 
persisting our objects to the database. The JSP files make up all the of the View code and Jython is used for all 
the back-end work. The goal of the 'BotList Link Aggregator Application' is to create a web-app that stores a set 
of links associated with keywords and description and also presents an interface to delete, view, edit, and 
list the links for the user.

The Stuts Action class contains the majority of the business logic for your web-application. In this example, the 
Jython classes are subclasses of the Action class. The one Java Action class acts as a controller; depending on 
the request from the user, this Action class invokes one of the Jython Action classes accordingly. Normally, an Action 
will just overwrite the execute method as shown in the Jython code below.

We discussed earlier how Jython is basically used for the backend coding, that includes communicating with Hibernate. 
Here are the code snippets associated with each of those operations. Most of the code is fairly intuitive; 
at the heart of the create operation, you must get the Hibernate SessionFactory and initiate a transaction. 
Once that is done, create an instance of the Hibernate POJO bean and populate the bean with the data from the Struts ActionForm. 
Once that is taken care of, use the session and transaction object to save the data. The Edit operation probably contains 
the most code and is seperated into two Jython classes.  